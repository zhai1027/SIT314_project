//----------------------------------------------------------------------------------------------


/*
*
*
Declaration: The idea of synchronize the data generated by the Arduino serial monitor to the CMD terminal is from:
    https://blog.csdn.net/weixin_42547619/article/details/101760443
This website provide how to do it step by step.

Thus, for checking your port of Arduino, please go through this website to check the detailed information of your Arduino
    https://www.mathworks.com/help/supportpkg/arduinoio/ug/find-arduino-port-on-windows-mac-and-linux.html
*
*
*/


//----------------------------------------------------------------------------------------------


/*
*
*
Declaration: The idea of researching the collection by ID from the database is from:
    //https://www.delftstack.com/howto/mongodb/mongodb-check-if-a-collection-exists/
This website provide how to do it step by step.
*
*
*/
//Ploty initial path:
var plotly = require('plotly')("ZhaiZiyan", "68A5oczCnbxiEtyjDBIZ")

//Require for IFTTT
const axios = require('axios');

//LED1状态和计数器
let LED1State = 0;
let LED1Counter = 0;
//警告值为2，可以改
const warning_value = 2;

// Plotly array for each LED
var data_LED1 = { x: [], y: [], name: 'LED1', type: 'scatter' };
var data_LED2 = { x: [], y: [], name: 'LED2', type: 'scatter' };
var data_LED3 = { x: [], y: [], name: 'LED3', type: 'scatter' };
var data_total = [data_LED1, data_LED2, data_LED3];

const mongoose = require('mongoose');
const SerialPort = require('serialport').SerialPort;

//必须要使用ObjectID方法才可以查找MongoDB的数据库 _id ，否则无法以字符串形式查找
const ObjectId = mongoose.Types.ObjectId;

mongoose.connect('mongodb+srv://zhaiz:15711120452Tom@sit314.s98fj1x.mongodb.net/?retryWrites=true&w=majority', { useNewUrlParser: true, useUnifiedTopology: true });

const Arduino_port = 'COM3';
const serialPort = new SerialPort(
    {
        path: Arduino_port,
        baudRate: 9600,
        dataBits: 8,
        parity: 'none',
        stopBits: 1,
        flowControl: false,
        autoOpen: false
    },
    false
);

const LED_values = [null, null, null];

const targetIds = [
    new ObjectId('6513a42f5640575f11ab5f74'),
    new ObjectId('6513cb7f1bc638319a4cf05d'),
    new ObjectId('6513cba1849f1525fb37e953')
];

const iftttWebhooksUrl = 'https://maker.ifttt.com/trigger/SIT314/with/key/dfch1J4mPyUIj1jqSffUMc8DOr5eTTd6Ws0jzarIm47';
// 发送 POST 请求给 IFTTT
async function sendToIFTTT(data) {
    try {
        const response = await axios.post(iftttWebhooksUrl, { value1: data });
        console.log('IFTTT Response:', response.data);
    } catch (error) {
        console.error('Error sending data to IFTTT:', error.message);
    }
}

function saveToCollection(targetId, ledValue) {
    //console.log("Start using void save to collection!")
    return new Promise((resolve, reject) => {
        const collection = mongoose.connection.collection('leds');
        collection.findOne({ _id: targetId }, function (err, doc) {
            if (err) {
                console.error("Error checking collection:", err);
                reject(err);
            }

            if (doc) {
                console.log("The collection has been found by the ID");
                collection.updateOne(
                    { _id: targetId },
                    { $push: { ledData: { time: Date.now(), LED: ledValue } } },
                    function (err, result) {
                        if (err) {
                            console.error("Error updating document:", err);
                            reject(err);
                        } else {
                            console.log("Data uploaded to existing collection");
                            resolve();
                        }
                    }
                );
            } else {
                console.log("The collection has not been found by the ID");
                reject("Collection not found");
            }
        });
    });
}

mongoose.connection.once('open', function () {
    console.log("MongoDB connected successfully.");
    serialPort.open(function (error) {
        if (error) {
            console.log("Open the port " + Arduino_port + "Error detected:" + error);
        } else {
            console.log("The port has been found, opening");
            serialPort.on('data', function (data) {
                const buffer = data;
                const decodedString = buffer.toString('utf8');
                console.log('Data from the Arduino port monitor:', decodedString);

                var capture_num = decodedString.match(/\d+/);
                if (capture_num) {
                    console.log("Captured number: " + capture_num[0]);
                    const led_capture = parseInt(capture_num[0]);
                    console.log("");
                    for (let i = 0; i < LED_values.length; i++) {
                        if (decodedString.includes(`led_one`) && i === 0) {
                            console.log(`LED1 found in decodedString`);
                            LED_values[i] = led_capture;
                            saveToCollection(targetIds[i], LED_values[i])
                                .then(() => {
                                    console.log("Saved LED1 value to MongoDB");
                                    console.log("Plotly diagram generate by LED1:");
                                    data_LED1.x.push((new Date()).toISOString());
                                    data_LED1.y.push(LED_values[0]);

                                    //IFTTT部分：当LED1连续5次输出
                                    //第一个if条件可以被优化，只有Counter + 1的时候就可以直接replace两个值为0了
                                    //但确保代码能运行，不改了。
                                    if (LED_values[0] == 1) {
                                        //State and Counter all + 1
                                        LED1State = LED1State + 1;
                                        LED1Counter = LED1Counter + 1;
                                    } else if (LED_values[0] == 0) {
                                        //Only Counter + 1
                                        LED1Counter = LED1Counter + 1;
                                    }

                                    if (LED1State == warning_value && LED1Counter == warning_value) {
                                        //触发IFTTT.js文件，向我发送警告邮件
                                        //dataToSend必须是SIT314，因为IFTTT中的hook我规定了只有event = SIT314才可以触发Then
                                        const dataToSend = 'SIT314';
                                        sendToIFTTT(dataToSend);
                                    } else if (LED1Counter == warning_value && LED1State != warning_value) {
                                        //还原两个值为0，重新计算。
                                        LED1Counter = 0;
                                        LED1State = 0;
                                        console.log("Replace counter and state value into ZERO")
                                    }
                                })
                                .catch((err) => {
                                    console.error("Error in saveToCollection:", err);
                                });
                        } else if (decodedString.includes(`led_two`) && i === 1) {
                            console.log(`LED2 found in decodedString`);
                            LED_values[i] = led_capture;
                            saveToCollection(targetIds[i], LED_values[i])
                                .then(() => {
                                    console.log("Saved LED2 value to MongoDB");
                                    console.log("Plotly diagram generate by LED2:");
                                    data_LED2.x.push((new Date()).toISOString());
                                    data_LED2.y.push(LED_values[1] + 2);
                                })
                                .catch((err) => {
                                    console.error("Error in saveToCollection:", err);
                                });
                        } else if (decodedString.includes(`led_three`) && i === 2) {
                            console.log(`LED3 found in decodedString`);
                            LED_values[i] = led_capture;
                            saveToCollection(targetIds[i], LED_values[i])
                                .then(() => {
                                    console.log("Saved LED3 value to MongoDB");
                                    console.log("Plotly diagram generate by LED3:");
                                    data_LED3.x.push((new Date()).toISOString());
                                    data_LED3.y.push(LED_values[2] + 4);

                                    //在最后一个LED触发发送Plotly的数据包
                                    //Sending packets to plotly to generate diagram

                                    var graphOptions = { filename: "SIT314_Projec_three_LED", fileopt: "overwrite" };
                                    plotly.plot(data_total, graphOptions, function (err, msg) {
                                        if (err) return console.log(err);
                                        console.log(msg);
                                    });

                                })
                                .catch((err) => {
                                    console.error("Error in saveToCollection:", err);
                                });
                        } else {
                            console.log(`LED${i + 1} not found in decodedString`);
                        }
                    }
                } else {
                    console.log("No valid number captured.");
                }

            });
        }
    });
});

//----------------------------------------------------------------------------------------------
/*
//发送数据包至Plotly网站，生成图像
//Preparing data for the array
for (let i = 0; i < LED_values.length; i++) {
    console.log("Plotly diagram generate by LED: " + i);
    data_LED1.x.push((new Date()).toISOString());
    data_LED1.y.push(LED_values[i]);
}
//Sending packets to plotly to generate diagram
var graphOptions = { filename: "SIT314_Projec_three_LED", fileopt: "overwrite" };
plotly.plot(data, graphOptions, function (err, msg) {
    if (err) return console.log(err);
    console.log(msg);
});
//mongoose.connection.close();

console.log("Plotly diagram generate by LED1:");
data_LED1.x.push((new Date()).toISOString());
data_LED1.y.push(LED_values[0]);

console.log("Plotly diagram generate by LED2:");
data_LED2.x.push((new Date()).toISOString());
data_LED2.y.push(LED_values[1]);

console.log("Plotly diagram generate by LED3:");
data_LED3.x.push((new Date()).toISOString());
data_LED3.y.push(LED_values[2]);
*/

